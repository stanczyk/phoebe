#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
**matlab.py**
phoebe implementation

in the module:
* *class* **Matlab**

Copyright 2017 Jaroslaw Stanczyk, e-mail: jaroslaw.stanczyk@upwr.edu.pl
"""
# pylint: disable=invalid-name
import inf
from yml import Yml


class Mat(object):
	"""Mat class"""
	def __init__(self):
		self.yam = Yml()

	@staticmethod
	def begin():
		info = inf.Inf()
		print '%'
		print '% (max, +) system description'
		print '% (c) 2017 {0}, e-mail: {1}'.format(info.AUTHOR, info.AUTHOR_EMAIL)
		print '%'
		print '% automatically generated by {0} on {1}'.format(info.VER, info.get_time())
		print '%'
		print

	@staticmethod
	def equation():
		print 'clear\n' + \
			'disp(\' \');\n' + \
			'disp(\'x(k) = A0x(k) + A1x(k-1) + B0u(k)\');\n' + \
			'disp(\'y(k) =  Cx(k)\');\n' + \
			'disp(\'---------------------------------\');\n'

	@staticmethod
	def clean_value(value):
		ans = ''
		for i in range(0, len(value)):
			if value[i] not in ['{', '}', '_', ',']:
				ans += value[i]
		return ans

	def values(self, values):
		if values:
			for key in sorted(values):
				print '%s = %s;' % (self.clean_value(key), values[key])
			print

	@staticmethod
	def vector(name, vector):
		print 'disp(\'{0}(k) = ['.format(name),
		for i in range(0, len(vector)):
			print '{0}(k);'.format(vector[i]),
		print ']\');'

	def matrix(self, name, idx_name, matrix):
		print '% matrix {0}{1}'.format(name, idx_name)
		w1, w2 = self.yam.get_matrix_size(matrix)
		print '{0}{1} = mp_zeros({2}, {3});'.format(name, idx_name, w1, w2)
		for i in range(0, w1):
			for j in range(0, w2):
				if matrix[i][j] != '-':
					print '   {0}{1}({2}, {3}) = {4};'.format(name, idx_name, i, j, self.clean_value(matrix[i][j]))
		print

	def input_vec(self, vec):
		w1, w2 = self.yam.get_matrix_size(vec)
		print
		print 'U  = mp_ones({0}, {1});'.format(w1, w2)

	def start_vec(self, vec):
		w1, w2 = self.yam.get_matrix_size(vec)
		print 'X0 = mp_zeros({0}, {1});'.format(w1, w2)
		print

	# As = mp_star(A0)
	# A = mp_multi(As, A1)
	# B = mp_multi(As, B0)
	# % number of iterations
	# K = 12;
	# X(:, 1) = mp_add(mp_multi(A, X0), mp_multi(B, U));
	# Y(1) = mp_multi(C, X(:, 1));
	# for i = 2:K
	# 	X(:, i) = mp_add(mp_multi(A, X(:, i - 1)), mp_multi(B, U));
	# 	Y(i) = mp_multi(C, X(:, i));
	# end
	# X
	# Y

	@staticmethod
	def end():
		print '% eof\n'

# eof.
