#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
**info.py**
constant, statics and global variables used by vcf_parser

in the module:

* *class* **Info**

Copyright 2017 Jaroslaw Stanczyk, e-mail: jaroslaw.stanczyk@upwr.edu.pl
"""
import yaml


class Info(object):
	"""Static info generated by/for battleship"""

	def __init__(self):
		pass

	# used by setup
	AUTHOR = 'Jaroslaw Stanczyk'
	AUTHOR_EMAIL = 'jaroslaw.stanczyk@upwr.edu.pl'
	MODULE_NAME = 'vcm'
	DESC = MODULE_NAME + ' - wrapper on python vcf (PyVCF) module'
	LICENSE = 'GNU Affero General Public License v3 or later (AGPLv3+)'
	# 'Creative Commons Attribution-Noncommercial-Share Alike license'
	URL = 'http://gen.up.wroc.pl/stanczyk/'
	# 'https://github.com/stanczyk/vcm'
	VERSION = '0.1'

	# used by vcm
	NAME = 'vcmcli'
	VER = '' + \
		NAME + \
		': v.' + \
		VERSION
	WRITTEN = '' + \
		'author: ' + AUTHOR + '\n' + \
		'e-mail: ' + AUTHOR_EMAIL + '\n' + \
		'copyright: (c) 2017 ' + AUTHOR

	DOC = '' + \
		'Usage:' + \
		'\t' + NAME + ' [-i | --info] [-V | --verbose] [(-m | --metadata)] [-b | --body] <vcf_file>\n' + \
		'\t' + NAME + ' (-s | --stdin) [-iV]\n' + \
		'\t' + NAME + ' -h | --help\n' + \
		'\t' + NAME + ' -v | --version\n' + \
		'\n' + \
		'Options:\n' + \
		'\t-s, --stdin		VCF data is read from stdin, in other case data are read from <vcf_file>.\n' + \
		'\t-m, --metadata	shows metadata (header) of the VCF file.\n' + \
		'\t-h, --help		shows this help message and exit.\n' + \
		'\t-i, --info		shows: file name, file format, amount of records and samples.\n' + \
		'\t-v, --version	show version information and exit.\n' + \
		'\t-V, --verbose	shows program version and exit status.'

	@staticmethod
	def dump(data, **kwargs):
		""" Simple wrapper to use the safety yaml dump function. """
		return yaml.safe_dump(data, **kwargs)

	def show(self, data, **kwargs):
		""" show data """
		print self.dump(data, **kwargs)


def self_test():
	"""self tests"""
	print 'Info.VER:'
	print Info.VER + '\n'
	print 'Info.DOC:'
	print Info.DOC


if __name__ == '__main__':
	self_test()

# eof.
